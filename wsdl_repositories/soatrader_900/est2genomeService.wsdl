<wsdl:definitions xmlns:soat="http://ws.soatrader.com/"
                  xmlns:tns="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_global.est2genome"
                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:apachesoap="http://xml.apache.org/xml-soap"
                  xmlns:impl="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_global.est2genome"
                  xmlns:intf="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_global.est2genome"
                  xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/"
                  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                  targetNamespace="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_global.est2genome">
   <wsdl:message name="SOATraderLicense">
      <wsdl:part element="soat:SOATraderLicense" name="SOATraderLicense"/>
   </wsdl:message>
   <wsdl:message name="SOATraderUsageStatistics">
      <wsdl:part element="soat:SOATraderUsageStatistics" name="SOATraderUsageStatistics"/>
   </wsdl:message>
  <wsdl:types>
      <schema xmlns="http://www.w3.org/2001/XMLSchema"
              targetNamespace="http://ws.soatrader.com/"
              elementFormDefault="qualified">
         <element type="string" name="SOATraderLicense"/>
         <element type="soat:SOATraderUsageStatistics" name="SOATraderUsageStatistics"/>
         <complexType name="SOATraderUsageStatistics">
            <sequence>
               <element type="decimal" name="HitsMade"/>
               <element type="decimal" name="HitsLeft"/>
            </sequence>
         </complexType>
      </schema>
      <schema xmlns="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
              targetNamespace="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_global.est2genome">
         <xsd:annotation>
            <xsd:documentation>Align EST and genomic DNA sequences</xsd:documentation>
         </xsd:annotation>
         <element name="runAndWaitFor">
            <complexType>
               <sequence>
                  <element name="est2genome" type="impl:Test2Genome"/>
               </sequence>
            </complexType>
         </element>
         <simpleType name="Test2GenomeEstsequenceSformat1">
            <restriction base="xsd:string">
               <enumeration value="gcg"/>
               <enumeration value="gcg8"/>
               <enumeration value="embl"/>
               <enumeration value="swiss"/>
               <enumeration value="fasta"/>
               <enumeration value="ncbi"/>
               <enumeration value="genbank"/>
               <enumeration value="nbrf"/>
               <enumeration value="pir"/>
               <enumeration value="codata"/>
               <enumeration value="strider"/>
               <enumeration value="clustal"/>
               <enumeration value="phylip"/>
               <enumeration value="acedb"/>
               <enumeration value="msf"/>
               <enumeration value="jackknifer"/>
               <enumeration value="jackknifernon"/>
               <enumeration value="nexus"/>
               <enumeration value="nexusnon"/>
               <enumeration value="treecon"/>
               <enumeration value="mega"/>
               <enumeration value="meganon"/>
               <enumeration value="ig"/>
               <enumeration value="staden"/>
               <enumeration value="text"/>
               <enumeration value="raw"/>
            </restriction>
         </simpleType>
         <complexType name="Test2GenomeEstsequence">
            <sequence>
               <element maxOccurs="1" minOccurs="0" name="estsequence_direct_data" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="estsequence_usa" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="sformat1"
                        type="impl:Test2GenomeEstsequenceSformat1"/>
               <element maxOccurs="1" minOccurs="0" name="sbegin1" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="send1" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="sprotein1" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="snucleotide1" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="sreverse1" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="slower1" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="supper1" type="xsd:boolean"/>
            </sequence>
         </complexType>
         <simpleType name="Test2GenomeGenomesequenceSformat2">
            <restriction base="xsd:string">
               <enumeration value="gcg"/>
               <enumeration value="gcg8"/>
               <enumeration value="embl"/>
               <enumeration value="swiss"/>
               <enumeration value="fasta"/>
               <enumeration value="ncbi"/>
               <enumeration value="genbank"/>
               <enumeration value="nbrf"/>
               <enumeration value="pir"/>
               <enumeration value="codata"/>
               <enumeration value="strider"/>
               <enumeration value="clustal"/>
               <enumeration value="phylip"/>
               <enumeration value="acedb"/>
               <enumeration value="msf"/>
               <enumeration value="jackknifer"/>
               <enumeration value="jackknifernon"/>
               <enumeration value="nexus"/>
               <enumeration value="nexusnon"/>
               <enumeration value="treecon"/>
               <enumeration value="mega"/>
               <enumeration value="meganon"/>
               <enumeration value="ig"/>
               <enumeration value="staden"/>
               <enumeration value="text"/>
               <enumeration value="raw"/>
            </restriction>
         </simpleType>
         <complexType name="Test2GenomeGenomesequence">
            <sequence>
               <element maxOccurs="1" minOccurs="0" name="genomesequence_direct_data" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="genomesequence_usa" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="sformat2"
                        type="impl:Test2GenomeGenomesequenceSformat2"/>
               <element maxOccurs="1" minOccurs="0" name="sbegin2" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="send2" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="sprotein2" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="snucleotide2" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="sreverse2" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="slower2" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="supper2" type="xsd:boolean"/>
            </sequence>
         </complexType>
         <complexType name="Test2GenomeMode">
            <sequence>
               <element maxOccurs="1" minOccurs="0" name="mode_both" type="xsd:boolean">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Both strands</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Both strands</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="mode_forward" type="xsd:boolean">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Forward strand only</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Forward strand only</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="mode_reverse" type="xsd:boolean">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Reverse strand only</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Reverse strand only</xsd:documentation>
                  </xsd:annotation>
               </element>
            </sequence>
         </complexType>
         <complexType name="Test2Genome">
            <sequence>
               <element name="estsequence" type="impl:Test2GenomeEstsequence">
                  <xsd:annotation>
                     <xsd:documentation>qualifiers for parameter: estsequence</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element name="genomesequence" type="impl:Test2GenomeGenomesequence">
                  <xsd:annotation>
                     <xsd:documentation>qualifiers for parameter: genomesequence</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="match" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Score for matching two bases</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Score for matching two bases</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="mismatch" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Cost for mismatching two bases</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Cost for mismatching two bases</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="gappenalty" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Gap penalty</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Cost for deleting a single base in either sequence,
           excluding introns</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="intronpenalty" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Intron penalty</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Cost for an intron, independent of length.</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="splicepenalty" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Splice site penalty</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Cost for an intron, independent of length and
           starting/ending on donor-acceptor sites</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="minscore" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Minimum accepted score</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Exclude alignments with scores below this threshold score.</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="reverse" type="xsd:boolean">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Reverse orientation</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Reverse the orientation of the EST sequence</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="splice" type="xsd:boolean">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Use donor and acceptor splice sites</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Use donor and acceptor splice sites. If you want to ignore
           donor-acceptor sites then set this to be false.</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="mode" type="impl:Test2GenomeMode">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Comparison mode</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>This determines the comparion mode. The default value is
           'both', in which case both strands of the est are compared
           assuming a forward gene direction (ie GT/AG splice sites), and the
           best comparsion redone assuming a reversed (CT/AC) gene splicing
           direction. The other allowed modes are 'forward', when just the
           forward strand is searched, and 'reverse', ditto for the reverse
           strand.</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="best" type="xsd:boolean">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Print out only best alignment</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>You can print out all comparisons instead of just the best
           one by setting this to be false.</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="space" type="xsd:float">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Space threshold (in megabytes)</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>For linear-space recursion. If product of sequence lengths
           divided by 4 exceeds this then a divide-and-conquer strategy is
           used to control the memory requirements. In this way very long
           sequences can be aligned. 
           If you have a machine with plenty of memory you can raise this
           parameter (but do not exceed the machine's physical RAM)</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="shuffle" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Shuffle</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Shuffle</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="seed" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Random number seed</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Random number seed</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="align" type="xsd:boolean">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Show the alignment</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Show the alignment. The alignment includes the first and
           last 5 bases of each intron, together with the intron width. The
           direction of splicing is indicated by angle brackets (forward or
           reverse) or ???? (unknown).</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="width" type="xsd:long">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Alignment width</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Alignment width</xsd:documentation>
                  </xsd:annotation>
               </element>
            </sequence>
         </complexType>
         <element name="runAndWaitForResponse">
            <complexType>
               <sequence>
                  <element name="est2genomeResult" type="impl:Test2GenomeResult"/>
               </sequence>
            </complexType>
         </element>
         <complexType name="Test2GenomeResult">
            <sequence>
               <element maxOccurs="1" minOccurs="0" name="report" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="detailed_status" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="outfile" type="xsd:string"/>
            </sequence>
         </complexType>
         <complexType name="TSoaplabException">
            <sequence/>
         </complexType>
         <element name="fault" type="impl:TSoaplabException"/>
         <element name="createAndRun">
            <complexType>
               <sequence>
                  <element name="est2genome" type="impl:Test2Genome"/>
               </sequence>
            </complexType>
         </element>
         <element name="createAndRunResponse">
            <complexType>
               <sequence>
                  <element name="jobid" type="xsd:string"/>
               </sequence>
            </complexType>
         </element>
         <element name="waitFor">
            <complexType>
               <sequence>
                  <element name="jobid" type="xsd:string"/>
               </sequence>
            </complexType>
         </element>
         <element name="waitForResponse">
            <complexType/>
         </element>
         <element name="getStatus">
            <complexType>
               <sequence>
                  <element name="jobid" type="xsd:string"/>
               </sequence>
            </complexType>
         </element>
         <element name="getStatusResponse">
            <complexType>
               <sequence>
                  <element name="status" type="impl:Tstatus"/>
               </sequence>
            </complexType>
         </element>
         <complexType name="Tstatus">
            <sequence>
               <element name="inProgress" type="xsd:boolean"/>
               <element name="detailed" type="xsd:string"/>
               <element name="erroneous" type="xsd:boolean"/>
               <element name="description" type="xsd:string"/>
               <element name="completed" type="xsd:boolean"/>
               <element name="asString" type="xsd:string"/>
               <element name="successful" type="xsd:boolean"/>
            </sequence>
         </complexType>
         <element name="getResults">
            <complexType>
               <sequence>
                  <element name="jobid" type="xsd:string"/>
               </sequence>
            </complexType>
         </element>
         <element name="getResultsResponse">
            <complexType>
               <sequence>
                  <element name="est2genomeResult" type="impl:Test2GenomeResult"/>
               </sequence>
            </complexType>
         </element>
      </schema>
  </wsdl:types>
  <wsdl:message name="getStatusResponse">
      <wsdl:part element="impl:getStatusResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="runAndWaitForResponse">
      <wsdl:part element="impl:runAndWaitForResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createAndRunRequest">
      <wsdl:part element="impl:createAndRun" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getStatusRequest">
      <wsdl:part element="impl:getStatus" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createAndRunResponse">
      <wsdl:part element="impl:createAndRunResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="runAndWaitForRequest">
      <wsdl:part element="impl:runAndWaitFor" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="waitForRequest">
      <wsdl:part element="impl:waitFor" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getResultsRequest">
      <wsdl:part element="impl:getResults" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getResultsResponse">
      <wsdl:part element="impl:getResultsResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="waitForResponse">
      <wsdl:part element="impl:waitForResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="SoaplabException">
      <wsdl:part element="impl:fault" name="fault"/>
  </wsdl:message>
  <wsdl:portType name="alignment_global__est2Genome">
      <wsdl:operation name="runAndWaitFor">
         <wsdl:documentation>Start the web service and receive the result. Blocks until job is finished.</wsdl:documentation>
         <wsdl:input message="impl:runAndWaitForRequest" name="runAndWaitForRequest"/>
         <wsdl:output message="impl:runAndWaitForResponse" name="runAndWaitForResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
      <wsdl:operation name="createAndRun">
         <wsdl:documentation>Start the web service and receive a job-id. Returns immediately.</wsdl:documentation>
         <wsdl:input message="impl:createAndRunRequest" name="createAndRunRequest"/>
         <wsdl:output message="impl:createAndRunResponse" name="createAndRunResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
      <wsdl:operation name="waitFor">
         <wsdl:documentation>Wait until a job (by job-id) has finished. Blocks until job is finished.</wsdl:documentation>
         <wsdl:input message="impl:waitForRequest" name="waitForRequest"/>
         <wsdl:output message="impl:waitForResponse" name="waitForResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
      <wsdl:operation name="getStatus">
         <wsdl:documentation>Get status information about a running job. Returns immediately.</wsdl:documentation>
         <wsdl:input message="impl:getStatusRequest" name="getStatusRequest"/>
         <wsdl:output message="impl:getStatusResponse" name="getStatusResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
      <wsdl:operation name="getResults">
         <wsdl:documentation>Get the results of a job (by job-id)</wsdl:documentation>
         <wsdl:input message="impl:getResultsRequest" name="getResultsRequest"/>
         <wsdl:output message="impl:getResultsResponse" name="getResultsResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="alignment_global.est2genome.derivedSoapBinding"
                 type="impl:alignment_global__est2Genome">
      <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
      <wsdl:operation name="runAndWaitFor">
         <wsdl:documentation>Start the web service and receive the result. Blocks until job is finished.</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="runAndWaitForRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="runAndWaitForResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
      <wsdl:operation name="createAndRun">
         <wsdl:documentation>Start the web service and receive a job-id. Returns immediately.</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="createAndRunRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="createAndRunResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
      <wsdl:operation name="waitFor">
         <wsdl:documentation>Wait until a job (by job-id) has finished. Blocks until job is finished.</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="waitForRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="waitForResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
      <wsdl:operation name="getStatus">
         <wsdl:documentation>Get status information about a running job. Returns immediately.</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="getStatusRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="getStatusResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
      <wsdl:operation name="getResults">
         <wsdl:documentation>Get the results of a job (by job-id)</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="getResultsRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="getResultsResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="est2genomeService">
      <wsdl:port binding="impl:alignment_global.est2genome.derivedSoapBinding"
                 name="alignment_global.est2genome.derived">
         <wsdlsoap:address location="http://ws.soatrader.com/dkfz-heidelberg.de/0.1/est2genomeService"/>
      </wsdl:port>
  </wsdl:service>
</wsdl:definitions>