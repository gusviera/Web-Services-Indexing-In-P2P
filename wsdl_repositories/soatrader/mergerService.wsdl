<wsdl:definitions xmlns:soat="http://ws.soatrader.com/"
                  xmlns:tns="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_consensus.merger"
                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                  xmlns:apachesoap="http://xml.apache.org/xml-soap"
                  xmlns:impl="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_consensus.merger"
                  xmlns:intf="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_consensus.merger"
                  xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/"
                  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                  targetNamespace="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_consensus.merger">
   <wsdl:message name="SOATraderLicense">
      <wsdl:part element="soat:SOATraderLicense" name="SOATraderLicense"/>
   </wsdl:message>
   <wsdl:message name="SOATraderUsageStatistics">
      <wsdl:part element="soat:SOATraderUsageStatistics" name="SOATraderUsageStatistics"/>
   </wsdl:message>
  <wsdl:types>
      <schema xmlns="http://www.w3.org/2001/XMLSchema"
              targetNamespace="http://ws.soatrader.com/"
              elementFormDefault="qualified">
         <element type="string" name="SOATraderLicense"/>
         <element type="soat:SOATraderUsageStatistics" name="SOATraderUsageStatistics"/>
         <complexType name="SOATraderUsageStatistics">
            <sequence>
               <element type="decimal" name="HitsMade"/>
               <element type="decimal" name="HitsLeft"/>
            </sequence>
         </complexType>
      </schema>
      <schema xmlns="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
              targetNamespace="http://www.dkfz-heidelberg.de/menu/tomcat/as/alignment_consensus.merger">
         <xsd:annotation>
            <xsd:documentation>Merge two overlapping nucleic acid
                  sequences</xsd:documentation>
         </xsd:annotation>
         <element name="runAndWaitFor">
            <complexType>
               <sequence>
                  <element name="merger" type="impl:Tmerger"/>
               </sequence>
            </complexType>
         </element>
         <simpleType name="TmergerAsequenceSformat1">
            <restriction base="xsd:string">
               <enumeration value="gcg"/>
               <enumeration value="gcg8"/>
               <enumeration value="embl"/>
               <enumeration value="swiss"/>
               <enumeration value="fasta"/>
               <enumeration value="ncbi"/>
               <enumeration value="genbank"/>
               <enumeration value="nbrf"/>
               <enumeration value="pir"/>
               <enumeration value="codata"/>
               <enumeration value="strider"/>
               <enumeration value="clustal"/>
               <enumeration value="phylip"/>
               <enumeration value="acedb"/>
               <enumeration value="msf"/>
               <enumeration value="jackknifer"/>
               <enumeration value="jackknifernon"/>
               <enumeration value="nexus"/>
               <enumeration value="nexusnon"/>
               <enumeration value="treecon"/>
               <enumeration value="mega"/>
               <enumeration value="meganon"/>
               <enumeration value="ig"/>
               <enumeration value="staden"/>
               <enumeration value="text"/>
               <enumeration value="raw"/>
            </restriction>
         </simpleType>
         <complexType name="TmergerAsequence">
            <sequence>
               <element maxOccurs="1" minOccurs="0" name="asequence_direct_data" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="asequence_usa" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="sformat1"
                        type="impl:TmergerAsequenceSformat1"/>
               <element maxOccurs="1" minOccurs="0" name="sbegin1" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="send1" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="sprotein1" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="snucleotide1" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="sreverse1" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="slower1" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="supper1" type="xsd:boolean"/>
            </sequence>
         </complexType>
         <simpleType name="TmergerBsequenceSformat2">
            <restriction base="xsd:string">
               <enumeration value="gcg"/>
               <enumeration value="gcg8"/>
               <enumeration value="embl"/>
               <enumeration value="swiss"/>
               <enumeration value="fasta"/>
               <enumeration value="ncbi"/>
               <enumeration value="genbank"/>
               <enumeration value="nbrf"/>
               <enumeration value="pir"/>
               <enumeration value="codata"/>
               <enumeration value="strider"/>
               <enumeration value="clustal"/>
               <enumeration value="phylip"/>
               <enumeration value="acedb"/>
               <enumeration value="msf"/>
               <enumeration value="jackknifer"/>
               <enumeration value="jackknifernon"/>
               <enumeration value="nexus"/>
               <enumeration value="nexusnon"/>
               <enumeration value="treecon"/>
               <enumeration value="mega"/>
               <enumeration value="meganon"/>
               <enumeration value="ig"/>
               <enumeration value="staden"/>
               <enumeration value="text"/>
               <enumeration value="raw"/>
            </restriction>
         </simpleType>
         <complexType name="TmergerBsequence">
            <sequence>
               <element maxOccurs="1" minOccurs="0" name="bsequence_direct_data" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="bsequence_usa" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="sformat2"
                        type="impl:TmergerBsequenceSformat2"/>
               <element maxOccurs="1" minOccurs="0" name="sbegin2" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="send2" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="sprotein2" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="snucleotide2" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="sreverse2" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="slower2" type="xsd:boolean"/>
               <element maxOccurs="1" minOccurs="0" name="supper2" type="xsd:boolean"/>
            </sequence>
         </complexType>
         <complexType name="TmergerDatafile">
            <sequence>
               <element maxOccurs="1" minOccurs="0" name="datafile_direct_data" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="datafile_url" type="xsd:string"/>
            </sequence>
         </complexType>
         <simpleType name="TmergerOsformat">
            <restriction base="xsd:string">
               <enumeration value="gcg"/>
               <enumeration value="gcg8"/>
               <enumeration value="embl"/>
               <enumeration value="swiss"/>
               <enumeration value="fasta"/>
               <enumeration value="ncbi"/>
               <enumeration value="genbank"/>
               <enumeration value="nbrf"/>
               <enumeration value="pir"/>
               <enumeration value="codata"/>
               <enumeration value="strider"/>
               <enumeration value="clustal"/>
               <enumeration value="phylip"/>
               <enumeration value="acedb"/>
               <enumeration value="msf"/>
               <enumeration value="jackknifer"/>
               <enumeration value="jackknifernon"/>
               <enumeration value="nexus"/>
               <enumeration value="nexusnon"/>
               <enumeration value="treecon"/>
               <enumeration value="mega"/>
               <enumeration value="meganon"/>
               <enumeration value="ig"/>
               <enumeration value="staden"/>
               <enumeration value="text"/>
               <enumeration value="raw"/>
            </restriction>
         </simpleType>
         <complexType name="Tmerger">
            <sequence>
               <element name="asequence" type="impl:TmergerAsequence">
                  <xsd:annotation>
                     <xsd:documentation>qualifiers for parameter: asequence</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element name="bsequence" type="impl:TmergerBsequence">
                  <xsd:annotation>
                     <xsd:documentation>qualifiers for parameter: bsequence</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="datafile" type="impl:TmergerDatafile">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Matrix file</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>This is the scoring matrix file used when comparing
           sequences. By default it is the file 'EBLOSUM62' (for proteins) or
           the file 'EDNAFULL' (for nucleic sequences). These files are
           found in the 'data' directory of the EMBOSS installation.</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="gapopen" type="xsd:float">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Gap opening penalty</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Gap opening penalty</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="gapextend" type="xsd:float">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Gap extension penalty</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Gap extension penalty</xsd:documentation>
                  </xsd:annotation>
               </element>
               <element maxOccurs="1" minOccurs="0" name="osformat" type="impl:TmergerOsformat">
                  <xsd:annotation>
                     <xsd:appinfo xmlns:emboss="http://emboss.sourceforge.net/schema/prompt">
                        <emboss:prompt>Format of the output sequence (outseq)</emboss:prompt>
                     </xsd:appinfo>
                     <xsd:documentation>Format of the output sequence (outseq)</xsd:documentation>
                  </xsd:annotation>
               </element>
            </sequence>
         </complexType>
         <element name="runAndWaitForResponse">
            <complexType>
               <sequence>
                  <element name="mergerResult" type="impl:TmergerResult"/>
               </sequence>
            </complexType>
         </element>
         <complexType name="TmergerResult">
            <sequence>
               <element maxOccurs="1" minOccurs="0" name="report" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="detailed_status" type="xsd:long"/>
               <element maxOccurs="1" minOccurs="0" name="outfile" type="xsd:string"/>
               <element maxOccurs="1" minOccurs="0" name="outseq" type="xsd:string"/>
            </sequence>
         </complexType>
         <complexType name="TSoaplabException">
            <sequence/>
         </complexType>
         <element name="fault" type="impl:TSoaplabException"/>
         <element name="createAndRun">
            <complexType>
               <sequence>
                  <element name="merger" type="impl:Tmerger"/>
               </sequence>
            </complexType>
         </element>
         <element name="createAndRunResponse">
            <complexType>
               <sequence>
                  <element name="jobid" type="xsd:string"/>
               </sequence>
            </complexType>
         </element>
         <element name="waitFor">
            <complexType>
               <sequence>
                  <element name="jobid" type="xsd:string"/>
               </sequence>
            </complexType>
         </element>
         <element name="waitForResponse">
            <complexType/>
         </element>
         <element name="getStatus">
            <complexType>
               <sequence>
                  <element name="jobid" type="xsd:string"/>
               </sequence>
            </complexType>
         </element>
         <element name="getStatusResponse">
            <complexType>
               <sequence>
                  <element name="status" type="impl:Tstatus"/>
               </sequence>
            </complexType>
         </element>
         <complexType name="Tstatus">
            <sequence>
               <element name="inProgress" type="xsd:boolean"/>
               <element name="detailed" type="xsd:string"/>
               <element name="erroneous" type="xsd:boolean"/>
               <element name="description" type="xsd:string"/>
               <element name="completed" type="xsd:boolean"/>
               <element name="asString" type="xsd:string"/>
               <element name="successful" type="xsd:boolean"/>
            </sequence>
         </complexType>
         <element name="getResults">
            <complexType>
               <sequence>
                  <element name="jobid" type="xsd:string"/>
               </sequence>
            </complexType>
         </element>
         <element name="getResultsResponse">
            <complexType>
               <sequence>
                  <element name="mergerResult" type="impl:TmergerResult"/>
               </sequence>
            </complexType>
         </element>
      </schema>
  </wsdl:types>
  <wsdl:message name="waitForResponse">
      <wsdl:part element="impl:waitForResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getResultsResponse">
      <wsdl:part element="impl:getResultsResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getStatusRequest">
      <wsdl:part element="impl:getStatus" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createAndRunResponse">
      <wsdl:part element="impl:createAndRunResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="runAndWaitForRequest">
      <wsdl:part element="impl:runAndWaitFor" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="waitForRequest">
      <wsdl:part element="impl:waitFor" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="SoaplabException">
      <wsdl:part element="impl:fault" name="fault"/>
  </wsdl:message>
  <wsdl:message name="getStatusResponse">
      <wsdl:part element="impl:getStatusResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getResultsRequest">
      <wsdl:part element="impl:getResults" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createAndRunRequest">
      <wsdl:part element="impl:createAndRun" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="runAndWaitForResponse">
      <wsdl:part element="impl:runAndWaitForResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="alignment_consensus__merger">
      <wsdl:operation name="runAndWaitFor">
         <wsdl:documentation>Start the web service and receive the result. Blocks until job is finished.</wsdl:documentation>
         <wsdl:input message="impl:runAndWaitForRequest" name="runAndWaitForRequest"/>
         <wsdl:output message="impl:runAndWaitForResponse" name="runAndWaitForResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
      <wsdl:operation name="createAndRun">
         <wsdl:documentation>Start the web service and receive a job-id. Returns immediately.</wsdl:documentation>
         <wsdl:input message="impl:createAndRunRequest" name="createAndRunRequest"/>
         <wsdl:output message="impl:createAndRunResponse" name="createAndRunResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
      <wsdl:operation name="waitFor">
         <wsdl:documentation>Wait until a job (by job-id) has finished. Blocks until job is finished.</wsdl:documentation>
         <wsdl:input message="impl:waitForRequest" name="waitForRequest"/>
         <wsdl:output message="impl:waitForResponse" name="waitForResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
      <wsdl:operation name="getStatus">
         <wsdl:documentation>Get status information about a running job. Returns immediately.</wsdl:documentation>
         <wsdl:input message="impl:getStatusRequest" name="getStatusRequest"/>
         <wsdl:output message="impl:getStatusResponse" name="getStatusResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
      <wsdl:operation name="getResults">
         <wsdl:documentation>Get the results of a job (by job-id)</wsdl:documentation>
         <wsdl:input message="impl:getResultsRequest" name="getResultsRequest"/>
         <wsdl:output message="impl:getResultsResponse" name="getResultsResponse"/>
         <wsdl:fault message="impl:SoaplabException" name="SoaplabException"/>
      </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="alignment_consensus.merger.derivedSoapBinding"
                 type="impl:alignment_consensus__merger">
      <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
      <wsdl:operation name="runAndWaitFor">
         <wsdl:documentation>Start the web service and receive the result. Blocks until job is finished.</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="runAndWaitForRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="runAndWaitForResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
      <wsdl:operation name="createAndRun">
         <wsdl:documentation>Start the web service and receive a job-id. Returns immediately.</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="createAndRunRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="createAndRunResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
      <wsdl:operation name="waitFor">
         <wsdl:documentation>Wait until a job (by job-id) has finished. Blocks until job is finished.</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="waitForRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="waitForResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
      <wsdl:operation name="getStatus">
         <wsdl:documentation>Get status information about a running job. Returns immediately.</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="getStatusRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="getStatusResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
      <wsdl:operation name="getResults">
         <wsdl:documentation>Get the results of a job (by job-id)</wsdl:documentation>
         <wsdlsoap:operation soapAction=""/>
         <wsdl:input name="getResultsRequest">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" part="SOATraderLicense"
                         message="tns:SOATraderLicense"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:input>
         <wsdl:output name="getResultsResponse">
            <soap:header xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                         part="SOATraderUsageStatistics"
                         message="tns:SOATraderUsageStatistics"
                         use="literal"/>
            <wsdlsoap:body use="literal"/>
         </wsdl:output>
         <wsdl:fault name="SoaplabException">
            <wsdlsoap:fault name="SoaplabException" use="literal"/>
         </wsdl:fault>
      </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="mergerService">
      <wsdl:port binding="impl:alignment_consensus.merger.derivedSoapBinding"
                 name="alignment_consensus.merger.derived">
         <wsdlsoap:address location="http://ws.soatrader.com/dkfz-heidelberg.de/0.1/mergerService"/>
      </wsdl:port>
  </wsdl:service>
</wsdl:definitions>